version: "3.2"

services:
  consul:
    container_name: 'consul-container'
    image: consul:1.3.0
    command: consul agent -dev -client 0.0.0.0
    ports:
      - "8500:8500"

  registrator:
    container_name: 'registrator-container'
    image: gliderlabs/registrator:v7
    #Attach with Docker socket and will register all running containers
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
    links:
      - consul
    command: -internal consul://consul:8500
  
  redis:
    container_name: redis_db-container
    image: redis
    ports: 
      - "6379:6379"
    expose:
      - "6379"
    #tty: true
    command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    #restart: always

  rabbitmq-service:
    container_name: 'rabbitmq-container'
    image: "rabbitmq:3-management"
    hostname: rabbit
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
          - "15672:15672"
          - "5672:5672"
    labels:
      NAME: "rabbitmq-server"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://rabbitmq-service:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels: 
      name: "rabbit"
    volumes:
      - ../data:/var/lib/rabbitmq
      - ../data/logs:/var/log/rabbitmq
    restart: always
  
  api-gateway:
    container_name: "api-gateway"
    build:
      context: './api-gateway/'
      dockerfile: Dockerfile
    tty: true
    ports:
      - "8080:7000"
    labels:
      name: "API gateway"
    links: 
      - rabbitmq-service
    # Mount app src code and node_modules to the container. 
    # To be deleted in case for AWS/GCP/Azure cloud platforms.
    volumes: 
      - ./api-gateway:/usr/src/api-gateway:rw
      - /usr/src/api-gateway/node_modules
    restart: always
  
  customer-service:
    container_name: 'customer-service'
    build: 
      context: './customer_service/'
      dockerfile: Dockerfile
    tty: true
    labels: 
      name: "Customer Service"
    links:
     - api-gateway
     - redis
    volumes: 
      - ./customer_service:/usr/src/customer_service:rw
      - /usr/src/customer_service/node_modules
    restart: always
    
  vehicle-service:
    container_name: 'vehicle-service'
    build: 
      context: './vehicle_service/'
      dockerfile: Dockerfile
    tty: true
    labels: 
      name: "Vehicle Service"
    links: 
     - api-gateway
    volumes: 
      - ./vehicle_service:/usr/src/vehicle_service:rw
      - /usr/src/vehicle_service/node_modules
    restart: always

## Fronetend Application
  frontend-app:
    container_name: 'frontend-app'
    build: 
      context: './frontend'
      dockerfile: Dockerfile
    tty: true
    labels: 
      name: 'Frontend Angular Application'
    links:
      - api-gateway
    ports:
      - "3004:4200"
    volumes: 
      - ./frontend:/usr/src/frontend
      - ./frontend/nginx-files/nginx.conf:/etc/nginx/nginx.conf
      - /usr/src/frontend/node_modules
    restart: always